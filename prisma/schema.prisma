// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DB_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Product       Product[]
    Cart          Cart[]
    Payment       Payment[]

    stripeCustomerId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id    String  @id @default(cuid())
    name  String
    price Decimal

    creator User   @relation(fields: [userId], references: [id])
    userId  String

    stripeId      String
    stripePriceId String

    CartItem    CartItem[]
    PaymentItem PaymentItem[]
}

model Cart {
    id String @id @default(cuid())

    user     User       @relation(fields: [userId], references: [id])
    userId   String
    cartItem CartItem[]
}

model CartItem {
    id String @id @default(cuid())

    cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    quantity  Int

    cartId      String
    PaymentItem PaymentItem[]

    @@unique([cartId, productId])
}

model PaymentItem {
    id        String   @id @default(cuid())
    product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
    productId String?
    quantity  Int

    payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
    paymentId String

    cartItem   CartItem? @relation(fields: [cartItemId], references: [id], onDelete: SetNull)
    cartItemId String?
}

enum PaymentStatus {
    PENDING
    SUCCESSFUL
    EXPIRED
}

model Payment {
    id String @id @default(cuid())

    checkoutId  String @unique
    paymentLink String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    items  PaymentItem[]
    status PaymentStatus

    expiresAt DateTime?
    createdAt DateTime  @default(now())
}
